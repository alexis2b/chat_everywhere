#
# This is a sample config file for chat_server
#
#
# Comments are introduced by a '#'.
# Uses spaces inside a directive.
# If you want to split a directive on several lines, finishes them with
# a '\'.
#
# You can also repeat a directive on several lines when there are
# several parameters
# Ex : ReserveNick foo@192.168.0.1,bar@192.168.0.2 can be written as :
# ReserveNick foo@192.168.0.1
# ReserveNick bar@192.168.0.2
#


############################# Administration ##############################
# AdminEmail admin@server.com : set the e-mail address that will be returned
# to users thanks to the '%E' sequence.
# Default is root
AdminEmail root

# OpPass : Password used to gain level 9 (op), must be a single string
# without spaces. Default is 'password'
OpPass secretpass

# BeepOnLogin : if set to yes, the server will beep at each new login
# Default is no
BeepOnLogin yes

# MaxUsers : the maximum number of users allowed at a time
# Connections will then be refused.
# Put it to -1 to give no limit, default is -1
MaxUsers -1

# AllowGuestLogin : can non-authentified users join the chat
# If set to "no", only users who have an entry in the password file
# and who successfully authentified are allowed to join the chat.
# Default is yes (everyone can join)
AllowGuestLogin yes



################################# Files ###################################
# LogFile : Path used to the log file. Redefines it if you want chat_server
# to log to another file. You may use /dev/null if you don't care about logs!
# Default is ./chat.log
LogFile ./chat.log

# LogTalk path : file in wich is logged all the public conversations that
# occurs on the channel. If not specified, no logging is done.
# Default is nothing (no logging)
LogTalk ./chat.talk

# MotdFile path : file in which is stored the Message Of The Day that will be
# displayed at the user after his login. You may put special escape sequences
# in it (see chat_everywhere(8) for details).
# Default is nothing (no motd)
MotdFile ./chat.motd

# PidFile path : file in which the PID (Process ID) of the server is stored.
# This is useful in the case of automated start / stop / restart scripts
# and may be used later.
# Default is /dev/null (no pid file)
PidFile /dev/null

# PasswordFile path : file in which the server will look for password
# protected nicks. See the sample password file chat.passwords to see how
# it works
# Default is ./chat.passwords
PasswordFile ./chat.passwords

# UsersFile path : file in which the server will store the connected users
# this is a simple text file with the nicks on each line. It is updated
# (= overwritten) when a user connects and deconnects. It can be used to
# display somewhere on the website the names of the logged users.
# Default is nothing (no users file)
UsersFile



################################ Minimas ##################################
# UsersInfoMinLevel : minimum level required to use the /usersinfo command
# WARNING : this directive is deprecated, see RestrictCommand for infos
# Default is 0 (deprecated)
UsersInfoMinLevel 0

# ServerStatsMinLevel level
# Minimum level (0-9) required to use the /stats command. This command displays
# informations about the server internal state.
# Default is 9.
ServerStatsMinLevel 9

# UserStatsMinLevel level
# Minimum level (0-9) required to use the /stats nick command. This command displays
# informations about the user such as login time or number of times it has been
# kicked.
# Default is 9.
UserStatsMinLevel 9

# RestrictCommand cmd[:level], cmd2[:level2], ...
# This command allow the user to forbid or restrict the use of some client
# commands. "cmd" is a user command that you can use with a "/" in the client.
# for example : /msg to use private messages
# If you specify a level, this is the mininum level required to use the command
# if you do not, the command is forbidden (even to operators)
# Examples :
#   RestrictCommand MSG:7      only users with level >= 7 can use private messaging
#   RestrictCommand BAN        nobody can use the /ban command
#   RestrictCommand TALK:1     you must be at least level 1 to talk...
#
# The default set of restrictions that you can modify is
# ban(>=9), gag(>=9), usersinfo(>=9)
RestrictCommand BAN:9
RestrictCommand GAG:9
RestrictCommand USERSINFO:9



############################## Network conf ###############################
# ServerPort : tells the server on which port to wait for
# incoming connections. Default is 5656
ServerPort 5656

# ListenIP : tell on which IP to "assign" the server, useful if you have
# multiple network interfaces and if you want to have two different servers
# on the private or public side (or make it available only to the private
# side for example).
# Default is 0.0.0.0 (ie : listen on all interfaces)
ListenIP 0.0.0.0

# Ip filtering directives
# You may block some IPs or subnet to provide a packet filter - like way
# of accessing to chat_server (note : this may not replace a firewall!).
#
# Order : select the order in which the Allow and Deny directives are
# tested. The first matching directive is applied. If no matching directives
# are applied, the IP is allowed (that's why you may not use it as a firewall).
# Then, use AllowIP and DenyIP to select which ranges to select.
#
# Example : to allow only a private class - C network : 192.168.0.0-255 and
# another one : 172.16.0.0/16 you would do have 
# Order Allow, Deny         # starts by evaluating Allow rules
# AllowIP 192.168.0.0/24, 172.16.0.0/16
# DenyIP 0.0.0.0/0
#
# Note : 0.0.0.0/0  matches any host, 0.0.0.0/32 matches no host.
# Default is :
# Order Allow, Deny
# AllowIP 0.0.0.0/0          # ie : Allow "any" client
# DenyIP 0.0.0.0/32          # never reached : allow is always matched
#
Order Allow, Deny
AllowIP 0.0.0.0/0
DenyIP 0.0.0.0/32




################################ Advanced #################################
# ReservedNick : reserve a nick to a restricted range of IP, this may be useful
# with the AutoLevel directive to prevent from nick spoofing.
# Note : you may also forbid some nick with a line like :
# ReserveNick h4x0r@0.0.0.0
# Usage : ReserveNick nick1@ip1[/sub1], ...
# Default is nothing (or no directive at all)
ReserveNick

# AutoLevel : upgrades automatically the given user at the given level on login
# Warning : the authentication is only nick and ip based, so it's not so
# strong (ie. Handle with care). You may use the ReserveNick directive to
# "protect" a nick from being used. Nick is not case sensitive.
# Usage : AutoLevel nick1[@ip1[/sub1]]:level, nick2[@ip2[/sub2]]:level, ...
# Default is nothing (or no directive at all)
AutoLevel

# MaxUserConnections : sets the maximum number of simultaneous allowed
# connections per IP. Use -1 to set no limit. Nick is not case sensitive.
# Default is -1
MaxUserConnections -1

# PingTimeout : sets the delay in seconds for ping timeout. If the client does
# not answer to server pings after the specified delay, it will be deconnected
# with a "ping timeout" error. A value of 0 disables the check for ping timeouts.
# Default is 60 (1 minute).
PingTimeout 60

# Statistics {On|Off|GlobalOnly} : select how many statistics will be kept
# by the server. On activates global (server) and users statistics, Off
# disables completely the statistics, and GlobalOnly disables per-user
# statistics.
# Each user stats is about 40 bytes long
# Default is on
Statistics On

# AllowNickChar, DenyNickChar chars : manage allowed and forbidden nick characters
# You can here specify characters that are allowed or denied added to the
# default set of allowed chars.
# The default set of allowed chars is a-z A-Z 0-9 - _ [ and ]
# NOTE : a space can never be a valid nick character (it would break some parsing)
# NOTE : you can deny of character of the default set with DenyNickChar
# Example : AllowNickChar .{}   will allow '.' '{' and '}' to be in a nick
#           DenyNickChar []     will take '[' and ']' out of the allowed set
# Default is nothing (no extra allowed or denied chars)
DenyNickChar
AllowNickChar

